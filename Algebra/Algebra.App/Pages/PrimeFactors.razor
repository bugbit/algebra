@page "/primefactors"
@using Microsoft.Extensions.Logging
@using System.IO;
@using System.Threading;
@using Algebra.Core.Syntax;
@using Algebra.Core.Math.AlgExprs;
@inject IStringLocalizer<Resource> localizer
@inject IJSRuntime JsRuntime;
@inject ILogger<PrimeFactorsModel> Logger
<h3>@localizer["MnuNTPrimeFactors"]</h3>

<Prompt Title="Si quiere descomponen en factores primos Introduzca número\nsi quiere calcular el máximo común divisor o el minimo común multiplo introduzca los numeros separados por commas" />

<div>
    <EditForm Model="@primeFactorsModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-row">
            <div class="form-group col">
                <InputText id="number" @bind-Value="primeFactorsModel.NumberSingleOrList" DisplayName="number o list numbers" />
            </div>
        </div>
        <div class="text-left">
            <button class="btn btn-primary" type="submit" @onclick=@(()=>primeFactorsModel.Method=1)>Descomponer</button>
            <button class="btn btn-secondary" type="submit" @onclick=@(()=>primeFactorsModel.Method=2)>mcd</button>
            <button class="btn btn-secondary" type="submit" @onclick=@(()=>primeFactorsModel.Method=3)>mcm</button>
        </div>
    </EditForm>
    <form @onsubmit=@(async ()=>await JsRuntime.InvokeVoidAsync("alert","submit"))>
        <div class="row">
            <div class="col">
                <input class="form-control" type="text" required @bind="numberStr" @oninput=@(e=>numberStr=(string)e.Value) />
            </div>
        </div>
        <div class="row">
            <div class="col">
                <div class="text-left">
                    <input type="submit" />
                </div>
            </div>
        </div>
    </form>
    <div class="needs-validation" novalidate>
        <div class="form-row">
            <div class="form-group col">
                <input @ref="txtn" type="text" width="80" class=@classnumstr required />
                <div class="valid-feedback">
                    Looks good!
                </div>
            </div>
        </div>
        <div class="text-left">
            <button class="btn btn-primary" @onclick="btnDescomponer_click">Descomponer</button>
            <button class="btn btn-secondary">mcd</button>
            <button class="btn btn-secondary">mcm</button>
        </div>
    </div>
    <h4>La solución es</h4>
    @if (result != null)
    {
        <table class="table table-borderless">
            <tbody>
                <tr>
                    <td>
                        <Equation Value=@(result?.Result?.ToLatex()?.ToString()) TeXDisplay="false"></Equation>
                    </td>
                </tr>
                @if (result.Explain != null)
                {
                    <tr>
                        <td>
                            <DetailCalc Explain=@(result.Explain)></DetailCalc>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private PrimeFactorsModel primeFactorsModel = new();
    ElementReference txtn;
    string classnumstr = "form-control is-invalid";
    string numberStr;
    CalcResult result;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await txtn.FocusAsync();

        await base.OnAfterRenderAsync(firstRender);
    }

    private void txtn_OnInputEvent(ChangeEventArgs changeEvent)
    {
        numberStr = (string)changeEvent.Value;
        classnumstr = (!string.IsNullOrEmpty(numberStr)) ? "form-control is-valid" : "form-control is-invalid";
    }

    private void HandleValidSubmit()
    {

    }

    private async Task btnDescomponer_click()
    {
        try
        {
            using (var stream = new StringReader(numberStr))
            {
                var e = await new Parser(stream, CancellationToken.None).Parse();

                result = await Task.Run(() => e.IFactors(ECalcOptions.Explain, CancellationToken.None));
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", ex.Message);
        }
    }
}
